// Code generated by mockery. DO NOT EDIT.

package model

import (
	internal "github.com/byte4ever/dsco/internal"
	mock "github.com/stretchr/testify/mock"
)

// MockExpandListInterface is an autogenerated mock type for the ExpandListInterface type
type MockExpandListInterface struct {
	mock.Mock
}

type MockExpandListInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExpandListInterface) EXPECT() *MockExpandListInterface_Expecter {
	return &MockExpandListInterface_Expecter{mock: &_m.Mock}
}

// ApplyOn provides a mock function with given fields: g
func (_m *MockExpandListInterface) ApplyOn(g internal.StructExpander) error {
	ret := _m.Called(g)

	if len(ret) == 0 {
		panic("no return value specified for ApplyOn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(internal.StructExpander) error); ok {
		r0 = rf(g)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExpandListInterface_ApplyOn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyOn'
type MockExpandListInterface_ApplyOn_Call struct {
	*mock.Call
}

// ApplyOn is a helper method to define mock.On call
//   - g internal.StructExpander
func (_e *MockExpandListInterface_Expecter) ApplyOn(g interface{}) *MockExpandListInterface_ApplyOn_Call {
	return &MockExpandListInterface_ApplyOn_Call{Call: _e.mock.On("ApplyOn", g)}
}

func (_c *MockExpandListInterface_ApplyOn_Call) Run(run func(g internal.StructExpander)) *MockExpandListInterface_ApplyOn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(internal.StructExpander))
	})
	return _c
}

func (_c *MockExpandListInterface_ApplyOn_Call) Return(_a0 error) *MockExpandListInterface_ApplyOn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExpandListInterface_ApplyOn_Call) RunAndReturn(run func(internal.StructExpander) error) *MockExpandListInterface_ApplyOn_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function with given fields:
func (_m *MockExpandListInterface) Count() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockExpandListInterface_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockExpandListInterface_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *MockExpandListInterface_Expecter) Count() *MockExpandListInterface_Count_Call {
	return &MockExpandListInterface_Count_Call{Call: _e.mock.On("Count")}
}

func (_c *MockExpandListInterface_Count_Call) Run(run func()) *MockExpandListInterface_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExpandListInterface_Count_Call) Return(_a0 int) *MockExpandListInterface_Count_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExpandListInterface_Count_Call) RunAndReturn(run func() int) *MockExpandListInterface_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function with given fields: o
func (_m *MockExpandListInterface) Push(o ExpandOp) {
	_m.Called(o)
}

// MockExpandListInterface_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockExpandListInterface_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - o ExpandOp
func (_e *MockExpandListInterface_Expecter) Push(o interface{}) *MockExpandListInterface_Push_Call {
	return &MockExpandListInterface_Push_Call{Call: _e.mock.On("Push", o)}
}

func (_c *MockExpandListInterface_Push_Call) Run(run func(o ExpandOp)) *MockExpandListInterface_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ExpandOp))
	})
	return _c
}

func (_c *MockExpandListInterface_Push_Call) Return() *MockExpandListInterface_Push_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockExpandListInterface_Push_Call) RunAndReturn(run func(ExpandOp)) *MockExpandListInterface_Push_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExpandListInterface creates a new instance of MockExpandListInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExpandListInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExpandListInterface {
	mock := &MockExpandListInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
