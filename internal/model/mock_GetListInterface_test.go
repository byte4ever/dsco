// Code generated by mockery. DO NOT EDIT.

package model

import (
	internal "github.com/byte4ever/dsco/internal"
	fvalue "github.com/byte4ever/dsco/internal/fvalue"

	mock "github.com/stretchr/testify/mock"
)

// MockGetListInterface is an autogenerated mock type for the GetListInterface type
type MockGetListInterface struct {
	mock.Mock
}

type MockGetListInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetListInterface) EXPECT() *MockGetListInterface_Expecter {
	return &MockGetListInterface_Expecter{mock: &_m.Mock}
}

// ApplyOn provides a mock function with given fields: g
func (_m *MockGetListInterface) ApplyOn(g internal.ValueGetter) (fvalue.Values, error) {
	ret := _m.Called(g)

	if len(ret) == 0 {
		panic("no return value specified for ApplyOn")
	}

	var r0 fvalue.Values
	var r1 error
	if rf, ok := ret.Get(0).(func(internal.ValueGetter) (fvalue.Values, error)); ok {
		return rf(g)
	}
	if rf, ok := ret.Get(0).(func(internal.ValueGetter) fvalue.Values); ok {
		r0 = rf(g)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fvalue.Values)
		}
	}

	if rf, ok := ret.Get(1).(func(internal.ValueGetter) error); ok {
		r1 = rf(g)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGetListInterface_ApplyOn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyOn'
type MockGetListInterface_ApplyOn_Call struct {
	*mock.Call
}

// ApplyOn is a helper method to define mock.On call
//   - g internal.ValueGetter
func (_e *MockGetListInterface_Expecter) ApplyOn(g interface{}) *MockGetListInterface_ApplyOn_Call {
	return &MockGetListInterface_ApplyOn_Call{Call: _e.mock.On("ApplyOn", g)}
}

func (_c *MockGetListInterface_ApplyOn_Call) Run(run func(g internal.ValueGetter)) *MockGetListInterface_ApplyOn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(internal.ValueGetter))
	})
	return _c
}

func (_c *MockGetListInterface_ApplyOn_Call) Return(_a0 fvalue.Values, _a1 error) *MockGetListInterface_ApplyOn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGetListInterface_ApplyOn_Call) RunAndReturn(run func(internal.ValueGetter) (fvalue.Values, error)) *MockGetListInterface_ApplyOn_Call {
	_c.Call.Return(run)
	return _c
}

// Count provides a mock function with given fields:
func (_m *MockGetListInterface) Count() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockGetListInterface_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockGetListInterface_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *MockGetListInterface_Expecter) Count() *MockGetListInterface_Count_Call {
	return &MockGetListInterface_Count_Call{Call: _e.mock.On("Count")}
}

func (_c *MockGetListInterface_Count_Call) Run(run func()) *MockGetListInterface_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGetListInterface_Count_Call) Return(_a0 int) *MockGetListInterface_Count_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGetListInterface_Count_Call) RunAndReturn(run func() int) *MockGetListInterface_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function with given fields: o
func (_m *MockGetListInterface) Push(o GetOp) {
	_m.Called(o)
}

// MockGetListInterface_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockGetListInterface_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - o GetOp
func (_e *MockGetListInterface_Expecter) Push(o interface{}) *MockGetListInterface_Push_Call {
	return &MockGetListInterface_Push_Call{Call: _e.mock.On("Push", o)}
}

func (_c *MockGetListInterface_Push_Call) Run(run func(o GetOp)) *MockGetListInterface_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(GetOp))
	})
	return _c
}

func (_c *MockGetListInterface_Push_Call) Return() *MockGetListInterface_Push_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockGetListInterface_Push_Call) RunAndReturn(run func(GetOp)) *MockGetListInterface_Push_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetListInterface creates a new instance of MockGetListInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetListInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetListInterface {
	mock := &MockGetListInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
