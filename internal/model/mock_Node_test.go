// Code generated by mockery. DO NOT EDIT.

package model

import (
	fvalue "github.com/byte4ever/dsco/internal/fvalue"
	mock "github.com/stretchr/testify/mock"

	plocation "github.com/byte4ever/dsco/internal/plocation"

	reflect "reflect"
)

// MockNode is an autogenerated mock type for the Node type
type MockNode struct {
	mock.Mock
}

type MockNode_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNode) EXPECT() *MockNode_Expecter {
	return &MockNode_Expecter{mock: &_m.Mock}
}

// BuildExpandList provides a mock function with given fields: e
func (_m *MockNode) BuildExpandList(e *ExpandList) {
	_m.Called(e)
}

// MockNode_BuildExpandList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildExpandList'
type MockNode_BuildExpandList_Call struct {
	*mock.Call
}

// BuildExpandList is a helper method to define mock.On call
//   - e *ExpandList
func (_e *MockNode_Expecter) BuildExpandList(e interface{}) *MockNode_BuildExpandList_Call {
	return &MockNode_BuildExpandList_Call{Call: _e.mock.On("BuildExpandList", e)}
}

func (_c *MockNode_BuildExpandList_Call) Run(run func(e *ExpandList)) *MockNode_BuildExpandList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ExpandList))
	})
	return _c
}

func (_c *MockNode_BuildExpandList_Call) Return() *MockNode_BuildExpandList_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNode_BuildExpandList_Call) RunAndReturn(run func(*ExpandList)) *MockNode_BuildExpandList_Call {
	_c.Call.Return(run)
	return _c
}

// BuildGetList provides a mock function with given fields: s
func (_m *MockNode) BuildGetList(s *GetList) {
	_m.Called(s)
}

// MockNode_BuildGetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildGetList'
type MockNode_BuildGetList_Call struct {
	*mock.Call
}

// BuildGetList is a helper method to define mock.On call
//   - s *GetList
func (_e *MockNode_Expecter) BuildGetList(s interface{}) *MockNode_BuildGetList_Call {
	return &MockNode_BuildGetList_Call{Call: _e.mock.On("BuildGetList", s)}
}

func (_c *MockNode_BuildGetList_Call) Run(run func(s *GetList)) *MockNode_BuildGetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*GetList))
	})
	return _c
}

func (_c *MockNode_BuildGetList_Call) Return() *MockNode_BuildGetList_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNode_BuildGetList_Call) RunAndReturn(run func(*GetList)) *MockNode_BuildGetList_Call {
	_c.Call.Return(run)
	return _c
}

// FeedFieldValues provides a mock function with given fields: srcID, fieldValues, value
func (_m *MockNode) FeedFieldValues(srcID string, fieldValues fvalue.Values, value reflect.Value) {
	_m.Called(srcID, fieldValues, value)
}

// MockNode_FeedFieldValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeedFieldValues'
type MockNode_FeedFieldValues_Call struct {
	*mock.Call
}

// FeedFieldValues is a helper method to define mock.On call
//   - srcID string
//   - fieldValues fvalue.Values
//   - value reflect.Value
func (_e *MockNode_Expecter) FeedFieldValues(srcID interface{}, fieldValues interface{}, value interface{}) *MockNode_FeedFieldValues_Call {
	return &MockNode_FeedFieldValues_Call{Call: _e.mock.On("FeedFieldValues", srcID, fieldValues, value)}
}

func (_c *MockNode_FeedFieldValues_Call) Run(run func(srcID string, fieldValues fvalue.Values, value reflect.Value)) *MockNode_FeedFieldValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(fvalue.Values), args[2].(reflect.Value))
	})
	return _c
}

func (_c *MockNode_FeedFieldValues_Call) Return() *MockNode_FeedFieldValues_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNode_FeedFieldValues_Call) RunAndReturn(run func(string, fvalue.Values, reflect.Value)) *MockNode_FeedFieldValues_Call {
	_c.Call.Return(run)
	return _c
}

// Fill provides a mock function with given fields: value, layers
func (_m *MockNode) Fill(value reflect.Value, layers []fvalue.Values) (plocation.Locations, error) {
	ret := _m.Called(value, layers)

	if len(ret) == 0 {
		panic("no return value specified for Fill")
	}

	var r0 plocation.Locations
	var r1 error
	if rf, ok := ret.Get(0).(func(reflect.Value, []fvalue.Values) (plocation.Locations, error)); ok {
		return rf(value, layers)
	}
	if rf, ok := ret.Get(0).(func(reflect.Value, []fvalue.Values) plocation.Locations); ok {
		r0 = rf(value, layers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plocation.Locations)
		}
	}

	if rf, ok := ret.Get(1).(func(reflect.Value, []fvalue.Values) error); ok {
		r1 = rf(value, layers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNode_Fill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fill'
type MockNode_Fill_Call struct {
	*mock.Call
}

// Fill is a helper method to define mock.On call
//   - value reflect.Value
//   - layers []fvalue.Values
func (_e *MockNode_Expecter) Fill(value interface{}, layers interface{}) *MockNode_Fill_Call {
	return &MockNode_Fill_Call{Call: _e.mock.On("Fill", value, layers)}
}

func (_c *MockNode_Fill_Call) Run(run func(value reflect.Value, layers []fvalue.Values)) *MockNode_Fill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(reflect.Value), args[1].([]fvalue.Values))
	})
	return _c
}

func (_c *MockNode_Fill_Call) Return(_a0 plocation.Locations, _a1 error) *MockNode_Fill_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNode_Fill_Call) RunAndReturn(run func(reflect.Value, []fvalue.Values) (plocation.Locations, error)) *MockNode_Fill_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNode creates a new instance of MockNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNode {
	mock := &MockNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
