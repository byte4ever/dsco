// Code generated by mockery. DO NOT EDIT.

package model

import (
	internal "github.com/byte4ever/dsco/internal"
	fvalue "github.com/byte4ever/dsco/internal/fvalue"

	mock "github.com/stretchr/testify/mock"
)

// MockGetOp is an autogenerated mock type for the GetOp type
type MockGetOp struct {
	mock.Mock
}

type MockGetOp_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGetOp) EXPECT() *MockGetOp_Expecter {
	return &MockGetOp_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: g
func (_m *MockGetOp) Execute(g internal.ValueGetter) (uint, *fvalue.Value, error) {
	ret := _m.Called(g)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 uint
	var r1 *fvalue.Value
	var r2 error
	if rf, ok := ret.Get(0).(func(internal.ValueGetter) (uint, *fvalue.Value, error)); ok {
		return rf(g)
	}
	if rf, ok := ret.Get(0).(func(internal.ValueGetter) uint); ok {
		r0 = rf(g)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(internal.ValueGetter) *fvalue.Value); ok {
		r1 = rf(g)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*fvalue.Value)
		}
	}

	if rf, ok := ret.Get(2).(func(internal.ValueGetter) error); ok {
		r2 = rf(g)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockGetOp_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockGetOp_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - g internal.ValueGetter
func (_e *MockGetOp_Expecter) Execute(g interface{}) *MockGetOp_Execute_Call {
	return &MockGetOp_Execute_Call{Call: _e.mock.On("Execute", g)}
}

func (_c *MockGetOp_Execute_Call) Run(run func(g internal.ValueGetter)) *MockGetOp_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(internal.ValueGetter))
	})
	return _c
}

func (_c *MockGetOp_Execute_Call) Return(uid uint, fieldValue *fvalue.Value, err error) *MockGetOp_Execute_Call {
	_c.Call.Return(uid, fieldValue, err)
	return _c
}

func (_c *MockGetOp_Execute_Call) RunAndReturn(run func(internal.ValueGetter) (uint, *fvalue.Value, error)) *MockGetOp_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGetOp creates a new instance of MockGetOp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGetOp(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGetOp {
	mock := &MockGetOp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
