// Code generated by mockery. DO NOT EDIT.

package model

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// mockStructExpander is an autogenerated mock type for the structExpander type
type mockStructExpander struct {
	mock.Mock
}

type mockStructExpander_Expecter struct {
	mock *mock.Mock
}

func (_m *mockStructExpander) EXPECT() *mockStructExpander_Expecter {
	return &mockStructExpander_Expecter{mock: &_m.Mock}
}

// ExpandStruct provides a mock function with given fields: path, _type
func (_m *mockStructExpander) ExpandStruct(path string, _type reflect.Type) error {
	ret := _m.Called(path, _type)

	if len(ret) == 0 {
		panic("no return value specified for ExpandStruct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, reflect.Type) error); ok {
		r0 = rf(path, _type)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockStructExpander_ExpandStruct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpandStruct'
type mockStructExpander_ExpandStruct_Call struct {
	*mock.Call
}

// ExpandStruct is a helper method to define mock.On call
//   - path string
//   - _type reflect.Type
func (_e *mockStructExpander_Expecter) ExpandStruct(path interface{}, _type interface{}) *mockStructExpander_ExpandStruct_Call {
	return &mockStructExpander_ExpandStruct_Call{Call: _e.mock.On("ExpandStruct", path, _type)}
}

func (_c *mockStructExpander_ExpandStruct_Call) Run(run func(path string, _type reflect.Type)) *mockStructExpander_ExpandStruct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(reflect.Type))
	})
	return _c
}

func (_c *mockStructExpander_ExpandStruct_Call) Return(err error) *mockStructExpander_ExpandStruct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockStructExpander_ExpandStruct_Call) RunAndReturn(run func(string, reflect.Type) error) *mockStructExpander_ExpandStruct_Call {
	_c.Call.Return(run)
	return _c
}

// newMockStructExpander creates a new instance of mockStructExpander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockStructExpander(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockStructExpander {
	mock := &mockStructExpander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
