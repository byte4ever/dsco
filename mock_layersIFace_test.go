// Code generated by mockery v2.12.3. DO NOT EDIT.

package dsco

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// mockLayersIFace is an autogenerated mock type for the layersIFace type
type mockLayersIFace struct {
	mock.Mock
}

// bind provides a mock function with given fields: key, dstValue
func (_m *mockLayersIFace) bind(key string, dstValue reflect.Value) ReportEntry {
	ret := _m.Called(key, dstValue)

	var r0 ReportEntry
	if rf, ok := ret.Get(0).(func(string, reflect.Value) ReportEntry); ok {
		r0 = rf(key, dstValue)
	} else {
		r0 = ret.Get(0).(ReportEntry)
	}

	return r0
}

// getPostProcessErrors provides a mock function with given fields:
func (_m *mockLayersIFace) getPostProcessErrors() []error {
	ret := _m.Called()

	var r0 []error
	if rf, ok := ret.Get(0).(func() []error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

type newMockLayersIFaceT interface {
	mock.TestingT
	Cleanup(func())
}

// newMockLayersIFace creates a new instance of mockLayersIFace. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockLayersIFace(t newMockLayersIFaceT) *mockLayersIFace {
	mock := &mockLayersIFace{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
