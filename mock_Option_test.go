// Code generated by mockery. DO NOT EDIT.

package dsco

import mock "github.com/stretchr/testify/mock"

// MockOption is an autogenerated mock type for the Option type
type MockOption struct {
	mock.Mock
}

type MockOption_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOption) EXPECT() *MockOption_Expecter {
	return &MockOption_Expecter{mock: &_m.Mock}
}

// apply provides a mock function with given fields: opts
func (_m *MockOption) apply(opts *internalOpts) error {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for apply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*internalOpts) error); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOption_apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'apply'
type MockOption_apply_Call struct {
	*mock.Call
}

// apply is a helper method to define mock.On call
//   - opts *internalOpts
func (_e *MockOption_Expecter) apply(opts interface{}) *MockOption_apply_Call {
	return &MockOption_apply_Call{Call: _e.mock.On("apply", opts)}
}

func (_c *MockOption_apply_Call) Run(run func(opts *internalOpts)) *MockOption_apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*internalOpts))
	})
	return _c
}

func (_c *MockOption_apply_Call) Return(_a0 error) *MockOption_apply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOption_apply_Call) RunAndReturn(run func(*internalOpts) error) *MockOption_apply_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOption creates a new instance of MockOption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOption {
	mock := &MockOption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
