// Code generated by mockery v2.12.3. DO NOT EDIT.

package dsco

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// MockBinder is an autogenerated mock type for the Binder type
type MockBinder struct {
	mock.Mock
}

// Bind provides a mock function with given fields: key, set, dstValue
func (_m *MockBinder) Bind(key string, set bool, dstValue reflect.Value) (Origin, string, bool, reflect.Value, error) {
	ret := _m.Called(key, set, dstValue)

	var r0 Origin
	if rf, ok := ret.Get(0).(func(string, bool, reflect.Value) Origin); ok {
		r0 = rf(key, set, dstValue)
	} else {
		r0 = ret.Get(0).(Origin)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, bool, reflect.Value) string); ok {
		r1 = rf(key, set, dstValue)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(string, bool, reflect.Value) bool); ok {
		r2 = rf(key, set, dstValue)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 reflect.Value
	if rf, ok := ret.Get(3).(func(string, bool, reflect.Value) reflect.Value); ok {
		r3 = rf(key, set, dstValue)
	} else {
		r3 = ret.Get(3).(reflect.Value)
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(string, bool, reflect.Value) error); ok {
		r4 = rf(key, set, dstValue)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// GetPostProcessErrors provides a mock function with given fields:
func (_m *MockBinder) GetPostProcessErrors() []error {
	ret := _m.Called()

	var r0 []error
	if rf, ok := ret.Get(0).(func() []error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

type NewMockBinderT interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBinder creates a new instance of MockBinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBinder(t NewMockBinderT) *MockBinder {
	mock := &MockBinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
