// Code generated by mockery v2.12.3. DO NOT EDIT.

package dsco

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// MockBinder2 is an autogenerated mock type for the Binder2 type
type MockBinder2 struct {
	mock.Mock
}

// Bind provides a mock function with given fields: key, dstType
func (_m *MockBinder2) Bind(key string, dstType reflect.Type) BindingAttempt {
	ret := _m.Called(key, dstType)

	var r0 BindingAttempt
	if rf, ok := ret.Get(0).(func(string, reflect.Type) BindingAttempt); ok {
		r0 = rf(key, dstType)
	} else {
		r0 = ret.Get(0).(BindingAttempt)
	}

	return r0
}

// Errors provides a mock function with given fields:
func (_m *MockBinder2) Errors() []error {
	ret := _m.Called()

	var r0 []error
	if rf, ok := ret.Get(0).(func() []error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]error)
		}
	}

	return r0
}

// Use provides a mock function with given fields: key
func (_m *MockBinder2) Use(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewMockBinder2T interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockBinder2 creates a new instance of MockBinder2. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockBinder2(t NewMockBinder2T) *MockBinder2 {
	mock := &MockBinder2{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
