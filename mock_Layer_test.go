// Code generated by mockery. DO NOT EDIT.

package dsco

import mock "github.com/stretchr/testify/mock"

// MockLayer is an autogenerated mock type for the Layer type
type MockLayer struct {
	mock.Mock
}

type MockLayer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLayer) EXPECT() *MockLayer_Expecter {
	return &MockLayer_Expecter{mock: &_m.Mock}
}

// register provides a mock function with given fields: to
func (_m *MockLayer) register(to *layerBuilder) error {
	ret := _m.Called(to)

	if len(ret) == 0 {
		panic("no return value specified for register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*layerBuilder) error); ok {
		r0 = rf(to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLayer_register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'register'
type MockLayer_register_Call struct {
	*mock.Call
}

// register is a helper method to define mock.On call
//   - to *layerBuilder
func (_e *MockLayer_Expecter) register(to interface{}) *MockLayer_register_Call {
	return &MockLayer_register_Call{Call: _e.mock.On("register", to)}
}

func (_c *MockLayer_register_Call) Run(run func(to *layerBuilder)) *MockLayer_register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*layerBuilder))
	})
	return _c
}

func (_c *MockLayer_register_Call) Return(_a0 error) *MockLayer_register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLayer_register_Call) RunAndReturn(run func(*layerBuilder) error) *MockLayer_register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLayer creates a new instance of MockLayer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLayer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLayer {
	mock := &MockLayer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
