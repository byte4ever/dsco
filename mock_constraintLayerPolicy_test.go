// Code generated by mockery. DO NOT EDIT.

package dsco

import (
	fvalue "github.com/byte4ever/dsco/internal/fvalue"
	mock "github.com/stretchr/testify/mock"
)

// mockConstraintLayerPolicy is an autogenerated mock type for the constraintLayerPolicy type
type mockConstraintLayerPolicy struct {
	mock.Mock
}

type mockConstraintLayerPolicy_Expecter struct {
	mock *mock.Mock
}

func (_m *mockConstraintLayerPolicy) EXPECT() *mockConstraintLayerPolicy_Expecter {
	return &mockConstraintLayerPolicy_Expecter{mock: &_m.Mock}
}

// GetFieldValuesFrom provides a mock function with given fields: model
func (_m *mockConstraintLayerPolicy) GetFieldValuesFrom(model ModelInterface) (fvalue.Values, error) {
	ret := _m.Called(model)

	if len(ret) == 0 {
		panic("no return value specified for GetFieldValuesFrom")
	}

	var r0 fvalue.Values
	var r1 error
	if rf, ok := ret.Get(0).(func(ModelInterface) (fvalue.Values, error)); ok {
		return rf(model)
	}
	if rf, ok := ret.Get(0).(func(ModelInterface) fvalue.Values); ok {
		r0 = rf(model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fvalue.Values)
		}
	}

	if rf, ok := ret.Get(1).(func(ModelInterface) error); ok {
		r1 = rf(model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockConstraintLayerPolicy_GetFieldValuesFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFieldValuesFrom'
type mockConstraintLayerPolicy_GetFieldValuesFrom_Call struct {
	*mock.Call
}

// GetFieldValuesFrom is a helper method to define mock.On call
//   - model ModelInterface
func (_e *mockConstraintLayerPolicy_Expecter) GetFieldValuesFrom(model interface{}) *mockConstraintLayerPolicy_GetFieldValuesFrom_Call {
	return &mockConstraintLayerPolicy_GetFieldValuesFrom_Call{Call: _e.mock.On("GetFieldValuesFrom", model)}
}

func (_c *mockConstraintLayerPolicy_GetFieldValuesFrom_Call) Run(run func(model ModelInterface)) *mockConstraintLayerPolicy_GetFieldValuesFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ModelInterface))
	})
	return _c
}

func (_c *mockConstraintLayerPolicy_GetFieldValuesFrom_Call) Return(_a0 fvalue.Values, _a1 error) *mockConstraintLayerPolicy_GetFieldValuesFrom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockConstraintLayerPolicy_GetFieldValuesFrom_Call) RunAndReturn(run func(ModelInterface) (fvalue.Values, error)) *mockConstraintLayerPolicy_GetFieldValuesFrom_Call {
	_c.Call.Return(run)
	return _c
}

// isStrict provides a mock function with given fields:
func (_m *mockConstraintLayerPolicy) isStrict() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for isStrict")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// mockConstraintLayerPolicy_isStrict_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isStrict'
type mockConstraintLayerPolicy_isStrict_Call struct {
	*mock.Call
}

// isStrict is a helper method to define mock.On call
func (_e *mockConstraintLayerPolicy_Expecter) isStrict() *mockConstraintLayerPolicy_isStrict_Call {
	return &mockConstraintLayerPolicy_isStrict_Call{Call: _e.mock.On("isStrict")}
}

func (_c *mockConstraintLayerPolicy_isStrict_Call) Run(run func()) *mockConstraintLayerPolicy_isStrict_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockConstraintLayerPolicy_isStrict_Call) Return(_a0 bool) *mockConstraintLayerPolicy_isStrict_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockConstraintLayerPolicy_isStrict_Call) RunAndReturn(run func() bool) *mockConstraintLayerPolicy_isStrict_Call {
	_c.Call.Return(run)
	return _c
}

// newMockConstraintLayerPolicy creates a new instance of mockConstraintLayerPolicy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockConstraintLayerPolicy(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockConstraintLayerPolicy {
	mock := &mockConstraintLayerPolicy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
