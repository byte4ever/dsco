// Code generated by mockery v2.13.1. DO NOT EDIT.

package model

import (
	fvalues "github.com/byte4ever/dsco/walker/fvalues"
	ifaces "github.com/byte4ever/dsco/walker/ifaces"

	mock "github.com/stretchr/testify/mock"
)

// MockGetListInterface is an autogenerated mock type for the GetListInterface type
type MockGetListInterface struct {
	mock.Mock
}

// ApplyOn provides a mock function with given fields: g
func (_m *MockGetListInterface) ApplyOn(g ifaces.Getter) (fvalues.FieldValues, error) {
	ret := _m.Called(g)

	var r0 fvalues.FieldValues
	if rf, ok := ret.Get(0).(func(ifaces.Getter) fvalues.FieldValues); ok {
		r0 = rf(g)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fvalues.FieldValues)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ifaces.Getter) error); ok {
		r1 = rf(g)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Count provides a mock function with given fields:
func (_m *MockGetListInterface) Count() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Push provides a mock function with given fields: o
func (_m *MockGetListInterface) Push(o GetOp) {
	_m.Called(o)
}

type mockConstructorTestingTNewMockGetListInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockGetListInterface creates a new instance of MockGetListInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockGetListInterface(t mockConstructorTestingTNewMockGetListInterface) *MockGetListInterface {
	mock := &MockGetListInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
