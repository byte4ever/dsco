// Code generated by mockery v2.13.1. DO NOT EDIT.

package walker

import mock "github.com/stretchr/testify/mock"

// mockConstraintLayerPolicy is an autogenerated mock type for the constraintLayerPolicy type
type mockConstraintLayerPolicy struct {
	mock.Mock
}

// GetFieldValues provides a mock function with given fields: model
func (_m *mockConstraintLayerPolicy) GetFieldValues(model ModelInterface) (FieldValues, error) {
	ret := _m.Called(model)

	var r0 FieldValues
	if rf, ok := ret.Get(0).(func(ModelInterface) FieldValues); ok {
		r0 = rf(model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(FieldValues)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ModelInterface) error); ok {
		r1 = rf(model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// isStrict provides a mock function with given fields:
func (_m *mockConstraintLayerPolicy) isStrict() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTnewMockConstraintLayerPolicy interface {
	mock.TestingT
	Cleanup(func())
}

// newMockConstraintLayerPolicy creates a new instance of mockConstraintLayerPolicy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockConstraintLayerPolicy(t mockConstructorTestingTnewMockConstraintLayerPolicy) *mockConstraintLayerPolicy {
	mock := &mockConstraintLayerPolicy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
